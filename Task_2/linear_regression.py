# -*- coding: utf-8 -*-
"""Linear_Regression_url.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YmqorUO7WcU8fCiadkItS7idkdC5iqWX

# **Ammar Fitwalla**
# Task 2: Exploring the Supervised learning

## Importing necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.linear_model import LinearRegression

"""## Importing / reading the data using pandas"""

url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully\n")
print("Rows: ",data.shape[0]) # Displays rows
print("Columns: ",data.shape[1]) # Displays columns
print()
data.head(5)

data.describe()

"""## Plotting the Hours and Scores Columns"""

data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Scores')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""## Defining the dependent and independent variables"""

X = data.iloc[:, 0].values.reshape(-1, 1)  # values converts it into a numpy array
y = data.iloc[:, 1].values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column

"""## Splitting the training and testing data and training our Linear Regression Model"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 
linear_regressor = LinearRegression()  # create object for the class
linear_regressor.fit(X_train, y_train)  # perform linear regression

"""## Predicting the test data with our trained model"""

Y_pred = linear_regressor.predict(X_test)  # make predictions
print(Y_pred)

df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': Y_pred.flatten()})
df

"""## Plotting the actual test data with predicted test result"""

df1 = df.head()
df1.plot(kind='bar',figsize=(12,6))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

"""## Plotting the regression line"""

# Plotting the regression line
line = linear_regressor.coef_*X+linear_regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line, color='red');
plt.show()

"""## Plotting the polynomial features"""

from sklearn.preprocessing import PolynomialFeatures
pr = PolynomialFeatures(degree = 2)
X_poly = pr.fit_transform(X)
pr.fit(X_poly, y)
lin_reg = LinearRegression()
lin_reg.fit(X_poly, y)
plt.scatter(X, y)
plt.scatter(X, lin_reg.predict(pr.fit_transform(X)))
plt.show()

"""## Testing the model with custom input data"""

hours = 9.25
own_pred = linear_regressor.predict(np.array([hours]).reshape(1, 1))
print("No of Hours =", hours)
print("Predicted Score = {}".format(own_pred[0][0]))

"""## Calculating MAE, MSE, RMSE"""

from sklearn import metrics
import math
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, Y_pred))

mean_squared_error = metrics.mean_squared_error(y_test, Y_pred)
print('Mean Squared Error:', mean_squared_error)

root_mean_squared_error = math.sqrt(mean_squared_error)
print('Root Mean Squared Error:', root_mean_squared_error)